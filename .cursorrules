# Strategic Analysis Project - Cursor Rules

## 프로젝트 개요
이 프로젝트는 오토마타를 활용한 워게임 시뮬레이션 분석 환경입니다.
공격(어뢰)와 방어(수상함과 기만기)를 통한 전략 개발이 목적입니다.

## 수정 금지 파일들
다음 파일들은 절대 수정하지 마세요:
- manuever.py
- detetor.py
- self_propelled_decoy.py
- stationary_decoy.py
- surfaceship.py
- torpedo.py
- tracking_manuever.py
- mobject 폴더 내 모든 python 파일들

## 수정 금지 파라미터들
다음 파라미터들은 변경하지 마세요:
- ManueverObject 파라미터
- DetectorObject 파라미터
- decoy_deployment_range 파라미터
- 수상함의 위치와 속도
- 어뢰의 위치와 속도

## 프로젝트 제약사항
1. 총 비용은 10을 초과할 수 없습니다
   - 고정식 기만기: 비용 1
   - 자항식 기만기: 비용 2.5
   
2. 기만기 운용 예시:
   - 고정식 기만기 10개 (총 비용: 10)
   - 자항식 기만기 3개 + 고정식 기만기 2개 (총 비용: 9.5)

3. 동점 시 기만기를 적게 사용하는 경우 가산점

## 실행 방법
- Windows: `python project\simulator.py`
- Linux/Mac: `python project/simulator.py`

## 개발 가이드라인
1. pyjevsim DEVS 환경을 사용합니다 (Python 3.10+)
2. 필수 의존성: dill ~= 0.3.6
3. 선택적 의존성: pytest (테스트용)
4. 모든 변경사항은 제약사항을 준수해야 합니다
5. 시뮬레이션 로직 수정 시 비용 계산을 반드시 확인하세요

## 코딩 스타일
- Python 표준 스타일 가이드 준수
- 함수와 클래스에 적절한 docstring 작성
- 변수명은 명확하고 의미있게 작성
- 주석은 한국어로 작성 가능

## 작업 대상 폴더 및 수정 가능 파일
### 작업 대상 폴더
- **project/attack** - 공격 관련 코드 구현
- **project/defense** - 방어 관련 코드 구현

### 수정 가능한 파일 (상세)
#### 공격 (Attack) - project/attack/
**Python 모델 파일:**
- **model/command_control.py** ✅ (공격 측 명령통제)
- **model/launcher.py** ✅ (공격 측 발사기)
- **model/torpedo_controller.py** ✅ (어뢰 제어기 - 핵심!)
- **model/project_config.py** ✅ (프로젝트 설정)

**시나리오 설정 파일:**
- **scenario/stationary_decoy.yaml** ✅ (고정식 기만기 시나리오)
- **scenario/self_propelled_decoy.yaml** ✅ (자항식 기만기 시나리오)
- **scenario/restore_decoys.yaml** ✅ (기만기 복원 시나리오)

#### 방어 (Defense) - project/defense/
**Python 모델 파일:**
- **model/command_control.py** ✅ (방어 측 명령통제)
- **model/launcher.py** ✅ (방어 측 발사기)
- **model/torpedo_controller.py** ✅ (어뢰 제어기)

**시나리오 설정 파일:**
- **scenario/stationary_decoy.yaml** ✅ (고정식 기만기 시나리오)
- **scenario/self_propelled_decoy.yaml** ✅ (자항식 기만기 시나리오)
- **scenario/restore_decoys.yaml** ✅ (기만기 복원 시나리오)

### 성능 개선 우선순위
1. **YAML 시나리오 파일** ⭐⭐⭐⭐⭐ (최고 우선순위)
   - 기만기 구성 최적화 (비용 10 제약 내)
   - 발사 각도, 속도, 생존시간 조정
   
2. **torpedo_controller.py** ⭐⭐⭐⭐⭐ (최고 우선순위)
   - 어뢰의 지능적 타겟 선택 알고리즘
   - 기만기 vs 실제 표적 구분 로직
   
3. **command_control.py** ⭐⭐⭐⭐ (높은 우선순위)
   - 위협 분석 및 선택적 대응 전략
   - 조건부 기만기 배치 로직

## 주의사항
- 수정 금지 파일들을 변경하면 시뮬레이션이 올바르게 작동하지 않을 수 있습니다
- 비용 제약을 위반하면 전략이 무효화될 수 있습니다
- 파라미터 변경 시 시뮬레이션 결과가 왜곡될 수 있습니다
- 지정된 작업 대상 폴더와 수정 가능한 파일만 편집하세요 